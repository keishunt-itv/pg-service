group 'com.itv.product'
version '1.0-SNAPSHOT'

buildscript {
    ext {
        kotlin_version = '1.3.70'
        micrometer_version = '1.3.6'
        ktor_version = '1.3.1'
        sonar_plugin_version = '3.0'
        log4j_version = '2.11.1'
        konfig_version = '1.6.10.0'
        jackson_version = '2.10.2'
        hateoas_version = '1.0.3.RELEASE'
        coroutines_version = '1.3.4'
    }
    repositories {
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonar_plugin_version"
        classpath "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.18.1"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.0"
    }
}


repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'com.gorylenko.gradle-git-properties'

mainClassName = 'com.itv.product.pg_service.ApplicationKt'

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        html.enabled false
        xml.enabled true
    }
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.natpryce:konfig:$konfig_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.springframework.hateoas:spring-hateoas:$hateoas_version"

    //ktor
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-jetty:$ktor_version"
    implementation "io.ktor:ktor-client:$ktor_version"
    implementation "io.ktor:ktor-client-json:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "io.ktor:ktor-client-core-native:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"

    //de/serialization
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    //logging
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation 'io.github.microutils:kotlin-logging:1.4.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutines_version"

    //tests
    testImplementation "junit:junit:4.12"
    testImplementation "io.ktor:ktor-server-test-host:$ktor_version"

    //swagger
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'
    swaggerUI 'org.webjars:swagger-ui:3.10.0'
    implementation "io.ktor:ktor-webjars:$ktor_version"

    //metrics
    implementation "io.ktor:ktor-metrics-micrometer:$ktor_version"
    implementation "io.micrometer:micrometer-registry-influx:$micrometer_version"
}

processResources.dependsOn generateSwaggerUI

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveBaseName = 'kotlin-skeleton'
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

swaggerSources {
    appName {
        inputFile = file('src/main/resources/swagger.json')
        ui {
            outputDir = file('src/main/resources/webjars/swagger')
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

configurations {
    testCompile {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }
}
compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

run {
    jvmArgs '-Dlog4j.configurationFile=src/main/resources/log4j2-dev.yml'
}

test {
    testLogging.showStandardStreams = true
}
